---
description: Core operational rules for the agent
globs: 
alwaysApply: true
---

# 核心操作规则 (Plan/Act模式)

本文档定义了智能助手在解决问题时应遵循的Plan/Act (计划/执行) 模式的核心操作规则。这种模式帮助确保解决方案的质量和一致性。

## Plan (计划) 阶段

计划阶段是深入思考问题和解决方案的过程，在此阶段应：

1. **理解需求**
   - 全面分析用户请求的内容和背景
   - 识别关键问题点和潜在约束
   - 在不明确时主动澄清需求

2. **制定策略**
   - 设计清晰的解决方案路径
   - 将大问题分解为可管理的小步骤
   - 预估可能的难点和应对方案

3. **评估资源**
   - 识别解决问题所需的工具和资源
   - 确认是否拥有足够的上下文信息
   - 判断是否需要寻求更多输入

## Act (执行) 阶段

执行阶段是将计划转化为实际行动的过程，在此阶段应：

1. **逐步实施**
   - 按照预定计划逐步执行操作
   - 每个步骤后验证结果是否符合预期
   - 保持操作的连贯性和一致性

2. **调整适应**
   - 根据执行过程中的反馈调整策略
   - 灵活应对意外情况和新发现
   - 必要时修正初始计划中的错误

3. **完成与验证**
   - 确保所有步骤都已完成
   - 验证最终结果是否满足用户需求
   - 对整个解决方案进行质量检查

## 应用原则

在镇岗塔项目开发过程中应用Plan/Act模式时，应遵循以下原则：

### 透明性原则
- 清晰表达思考过程和决策理由
- 在计划阶段明确说明将要采取的步骤
- 保持对用户的操作可见性

### 效率优先原则
- 优先考虑解决问题的最直接路径
- 避免不必要的复杂性和过度工程化
- 平衡全面性和时间效率

### 持续反馈原则
- 在执行复杂任务时提供进度更新
- 及时报告发现的问题和解决办法
- 主动请求用户反馈验证方向

## Plan/Act模式的实践示例

### 复杂功能开发

**Plan 阶段：**
- 分析功能需求和用例
- 设计组件结构和数据流
- 识别可能的技术挑战
- 确定必要的API和依赖项

**Act 阶段：**
- 搭建基础框架
- 实现核心功能逻辑
- 添加错误处理和边缘情况
- 优化性能并进行测试

### 代码重构

**Plan 阶段：**
- 识别需要重构的代码区域
- 分析当前架构和问题点
- 设计新的代码结构和模式
- 制定无缝迁移策略

**Act 阶段：**
- 逐步进行代码修改
- 保持功能的向后兼容性
- 持续测试确保功能正常
- 完成后进行性能验证
## 沟通中的Plan/Act模式

在与用户交流时，也应遵循类似的模式：

**Plan 阶段：**
- 理解用户的真实需求和目标
- 考虑可能的解决方案和实施路径
- 预判可能的困难和疑问

**Act 阶段：**
- 清晰表达解决方案和步骤
- 实施操作并提供适当的解释
- 验证结果并确认用户满意度

## 中文沟通要求

在Plan/Act模式的所有阶段中：

- 使用中文进行思考、计划和沟通
- 技术术语可保留英文原文，但提供中文说明
- 确保所有反馈和指导均使用清晰的中文表达
- 保持语言表达的一致性和专业性
